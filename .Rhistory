gtsummary::modify_header(label = "Variable",
estimate = sym[2],
conf.low = "95% CI",
bk = "blank")
get_sig <- get %>%
gtsummary::modify_column_hide(column = estimate) %>%
gtsummary::modify_column_hide(column = std.error)
if (vif == TRUE){
get_vif <- get %>%
gtsummary::modify_column_hide(column = estimate) %>%
gtsummary::modify_column_hide(column = std.error)  %>%
gtsummary::modify_column_hide(column = starts_with("p")) %>%
gtsummary::modify_table_body(dplyr::left_join,
apaSupp::vif_to_tibble(x, d = d),
by = c("variable", "row_type")) %>%
gtsummary::modify_header(vif ~ "VIF")
table <- list(get_tran, get_orig, get_sig, get_vif) %>%
gtsummary::tbl_merge(tab_spanner = c(abr[1], abr[2], "p", NA)) %>%
gtsummary::as_flex_table() %>%
flextable::compose(part = "all", j = c(4, 7),
value = flextable::as_paragraph(NA))
} else {
table <- list(get_tran,  get_orig,  get_sig) %>%
gtsummary::tbl_merge(tab_spanner = c(abr[1],  abr[2],  "p")) %>%
gtsummary::as_flex_table() %>%
flextable::compose(part = "header", j = c(4, 7),
value = flextable::as_paragraph(NA)) %>%
flextable::compose(par = "body", j = c(4, 7),
value = flextable::as_paragraph(NA))
}
n_col <- flextable::ncol_keys(table)
n_rows <- flextable::nrow_part(table, part = "body")
if (pr2 == TRUE){
r2 <- performance::r2(x) %>%
unlist(use.names = FALSE) %>%
p_num(d = d + 1, stars = FALSE)
table <- table %>%
flextable::add_body_row(top = FALSE,
values = NA) %>%
flextable::compose(part = "body", i = (n_rows + 1), j = 1,
value = flextable::as_paragraph("Tjur's R",
flextable::as_chunk("\u00B2"))) %>%
flextable::compose(part = "body", i = (n_rows + 1), j = 2,
value = flextable::as_paragraph(r2))
}
n_col <- flextable::ncol_keys(table)
n_rows <- flextable::nrow_part(table, part = "body")
table <- table  %>%
flextable::delete_rows(part = "header", i = 1) %>%
flextable::add_header_row(values = c(NA, abr[1], NA, abr[2], rep(NA, n_col - 6)),
colwidths = c(1, 2, 1, 2, rep(1, n_col - 6))) %>%
apaSupp::theme_apa(caption = caption,
no_notes = FALSE,
d = d) %>%
flextable::italic(part = "header", i = 2, j = 4:5) %>%
flextable::align(part = "all", j = c(2, 5), align = "right") %>%
flextable::align(part = "all", j = c(3, 6), align = "left") %>%
flextable::align(part = "header", i = 1, align = "center") %>%
flextable::align(part = "footer", align = "left") %>%
flextable::hline(part = "header", i = 1,
border = flextable::fp_border_default(width = 0)) %>%
flextable::add_footer_lines("") %>%
flextable::compose(i = 1, j = 1,
value = main_note,
part = "footer") %>%
flextable::hline(part = "header", i = 1, j = 2:3) %>%
flextable::hline(part = "header", i = 1, j = 5:6)
if (lrt == TRUE){
table <- table %>%
flextable::align(part = "all", j = c(8), align = "right") %>%
flextable::align(part = "all", j = c(9), align = "left") %>%
flextable::align(part = "header", i = 1, align = "center") %>%
flextable::merge_at(part = "header", i = 1, j = 8:9) %>%
flextable::compose(part = "header", i = 1, j = 8,
value = flextable::as_paragraph(flextable::as_i("p"))) %>%
flextable::hline(part = "header", i = 1, j = 8:9)
} else {
table <- table %>%
flextable::compose(part = "header", i = 1, j = 8,
value = flextable::as_paragraph(NA)) %>%
flextable::compose(part = "header", i = 2, j = 8,
value = flextable::as_paragraph(flextable::as_i("p")))
}
n_rows <- flextable::nrow_part(table, part = "body")
if (n_fit > 0) {
table <- table %>%
flextable::italic(part = "body", i = (n_rows - n_fit + 1):(n_rows)) %>%
flextable::hline(i = n_rows - n_fit)
}
if(!is.null(var_labels)){
table <- table %>%
flextable::labelizor(part = "body",
labels = var_labels)
}
if (!is.null(p_note)){
table <- table %>%
flextable::add_footer_lines("") %>%
flextable::compose(i = 2, j = 1,
value = flextable::as_paragraph(flextable::as_chunk(p_note)),
part = "footer")
}
return(table)
}
tab_glm(fit_glm2, vif = FALSE, lrt = FALSE, pr2 = FALSE)
tab_glm(fit_glm2, vif = FALSE, lrt = FALSE)
tab_glm(fit_glm2, vif = FALSE, lrt = FALSE, fit = "AIC")
#' @title
#' APA: flextable for Comparing the Performance of Generalize Linear models
#'
#' @description
#' Create a flextable for Comparing the Performance of Linear models via Several Metrics
#'
#'
#' @param x REQUIRED: List. at least 2 glm models, bare names, If named list, then names appear in the table
#' @param caption Optional: Text. Caption for the table
#' @param general_note Optional: Text. General note for footer of APA table
#' @param sort Optional: metrics to sort by, default = "AIC", but may use: "R2_Tjur", "R2_Nag", "AIC",  "BIC", "RMSE"
#' @param d Optional: Number. Digits after the decimal place
#'
#' @returns a flextable object
#' @import gtsummary
#' @import flextable
#' @import tidyverse
#' @import broom.helpers
#' @import performance
#' @export
#'
#' @examples
#'
#' mtcars <- mtcars %>% dplyr::mutate(cyl = factor(cyl))
#'
#' fit1 <- glm(vs ~ wt, data = mtcars, family = "binomial")
#' fit2 <- glm(vs ~ wt + mpg + cy, data = mtcars, family = "binomial")
#'
#' tab_glm_fits(list(fit1, fit2))
#'
tab_glm_fits <- function(x,
caption = "Comparison of Generalized Linear Model Performane Metrics",
general_note = NA,
sort = "AIC",
d = 2){
ns <- sapply(x,function(y) length(y$residuals))
nparams <- sapply(x,function(y) length(y$coefficients))
nagR2 <- sapply(x, performance::r2_nagelkerke)
if (length(unique(ns)) == 1){
n <- unique(ns)
note_sample <- glue::glue("N = {n}. ")
} else {
note_sample = "Models fit to different samples. "
}
final_note <- flextable::as_paragraph(flextable::as_i("Note. "),
note_sample,
flextable::as_i("k"),
" = number of parameters estimated in each model. ",
"Larger values indicated better performance for pseudo R-squared, both Tjur's  (",
flextable::as_i(flextable::as_chunk("Tjur-R\u00B2")),
") and Nagelkerke's (",
flextable::as_i(flextable::as_chunk("Nag-R\u00B2")),
"). Smaller values indicated better performance for Akaike's Information Criteria (AIC), Bayesian information criteria (BIC), and Root Mean Squared Error (RMSE).",
flextable::as_chunk(general_note))
df <- performance::compare_performance(x) %>%
data.frame() %>%
dplyr::mutate(N = ns) %>%
dplyr::mutate(k = nparams) %>%
dplyr::mutate(R2_Nag = nagR2) %>%
dplyr::select(Model = Name,
N, k,
R2_Tjur,
R2_Nag,
AIC,
BIC,
RMSE) %>%
dplyr::arrange(sort) %>%
dplyr::mutate(across(c(R2_Tjur, R2_Nag),
~ apaSupp::p_num(., d = d + 1, stars = FALSE)))
if (length(unique(ns)) == 1){
df <- df %>%
dplyr::select(-N)
}
tab <- df %>%
flextable::flextable() %>%
apaSupp::theme_apa(caption = caption,
p_note = NULL) %>%
flextable::colformat_double(j = c("k"), big.mark = "", digits = 0) %>%
flextable::colformat_double(j = c("AIC", "BIC", "RMSE"), big.mark = "", digits = d) %>%
flextable::align(part = "all", j = c("R2_Tjur", "AIC"), align = "right") %>%
flextable::align(part = "all", j = c("k", "R2_Nag", "BIC"), align = "left") %>%
flextable::italic(part = "header", j = "k") %>%
flextable::compose(part = "header",
j = "R2_Tjur",
value = flextable::as_paragraph(flextable::as_i(flextable::as_chunk("Tjur-R\u00B2"))))%>%
flextable::compose(part = "header",
j = "R2_Nag",
value = flextable::as_paragraph(flextable::as_i(flextable::as_chunk("Nag-R\u00B2"))))%>%
flextable::add_footer_lines("") %>%
flextable::compose(i = 1, j = 1,
value = final_note,
part = "footer")
return(tab)
}
remotes::install_github("sarbearschwartz/apaSupp")
# library(remotes)
# remotes::install_github("sarbearschwartz/apaSupp")
# remotes::install_github("ddsjoberg/gtsummary")
library(tidyverse)
library(haven)        # read in SPSS dataset
library(apaSupp)
library(pscl)         # psudo R-squared function
library(performance)  # r-squared values
library(GGally)
df_depress <- haven::read_spss("https://raw.githubusercontent.com/CEHS-research/data/master/Hoffmann_datasets/depress.sav") %>%
haven::as_factor() %>%    # labelled to factors
haven::zap_label() %>%    # remove SPSS junk
haven::zap_formats() %>%  # remove SPSS junk
haven::zap_widths() %>%   # remove SPSS junk
dplyr::mutate(sex = forcats::fct_recode(sex,
"Female" = "female",
"Male" = "male")) %>%
dplyr::mutate(lifesat = forcats::fct_recode(lifesat,
"Yes (1)" = "high",
"No (0)" = "low"))
fit_glm_1 <- glm(satlife ~ sex,
data = df_depress,
family = binomial(link = "logit"))
apaSupp::tab_glm(fit_glm_1,
var_labels = c(sex = "Sex"))
fit_glm_2 <- glm(satlife ~ sex + iq + age + weight,
data = df_depress,
family = binomial(link = "logit"))
apaSupp::tab_glm(fit_glm_2,
var_labels = c(sex = "Sex",
iq = "IQ, pts",
age = "Age, yrs",
weight = "Weight, lbs"),
caption = "EXAMPLE 3.3 A Logistic Regression Model of Life Satisfaction with Multiple Independent Variables, middle of page 52")
apaSupp::tab_glm_fits(list("Univariate"   = fit_glm_1,
"Multivariate" = fit_glm_2))
df_depress_model <- df_depress %>%
dplyr::filter(complete.cases(satlife,
sex, iq, age, weight))
fit_glm_1_redo <- glm(satlife ~ sex,
data = df_depress_model,
family = binomial(link = "logit"))
fit_glm_2_redo <- glm(satlife ~ sex + iq + age + weight,
data = df_depress_model,
family = binomial(link = "logit"))
apaSupp::tab_glms(list("Univariate"   = fit_glm_1_redo,
"Multivariate" = fit_glm_2_redo),
narrow = TRUE)
apaSupp::tab_glms(list("Univariate"   = fit_glm_1_redo,
"Multivariate" = fit_glm_2_redo),
fit = c("AIC", "BIC"),
narrow = TRUE)
apaSupp::tab_glm_fits(list("Univariate, Initial"   = fit_glm_1,
"Univariate, Restricted" = fit_glm_1_redo,
"Multivariate" = fit_glm_2_redo))
df_depress_ref$male
df_depress_ref <- df_depress %>%
dplyr::mutate(male = sex %>% forcats::fct_relevel("female", after = 0))
df_depress_ref$male
fit_glm_2_male <- glm(satlife ~ male + iq + age + weight,
data = df_depress,
family = binomial(link = "logit"))
apaSupp::tab_glm_fits(list("Initial Sex Coding" = fit_glm_2,
"Reverse-Code Sex" = fit_glm_2_male))
df_depress_ref %>%
dplyr::select(sex, male) %>%
apaSupp::tab_freq()
df_depress_ref <- df_depress %>%
dplyr::mutate(male = sex %>% forcats::fct_relevel("female", after = 0))
df_depress_ref %>%
dplyr::select(sex, male) %>%
apaSupp::tab_freq()
df_depress_ref <- df_depress %>%
dplyr::mutate(male   = sex %>% forcats::fct_relevel("female", after = 0)) %>%   dplyr::mutate(female = sex %>% forcats::fct_relevel("male", after = 0))
df_depress_ref %>%
dplyr::select(sex, male, female) %>%
apaSupp::tab_freq()
labels(df_depress_ref$sex)
levels(df_depress_ref$sex)
levels(df_depress_ref$sex)
levels(df_depress_ref$male)
levels(df_depress_ref$female)
df_depress_ref <- df_depress %>%
dplyr::mutate(male   = sex %>% forcats::fct_relevel("Female", after = 0)) %>%   dplyr::mutate(female = sex %>% forcats::fct_relevel("Male", after = 0))
levels(df_depress_ref$sex)
levels(df_depress_ref$male)
levels(df_depress_ref$female)
df_depress %>%
dplyr::select(sex, male, female) %>%
apaSupp::tab_freq()
df_depress_ref <- df_depress %>%
dplyr::mutate(male   = sex %>% forcats::fct_relevel("Female", after = 0)) %>%   dplyr::mutate(female = sex %>% forcats::fct_relevel("Male", after = 0))
df_depress_ref %>%
dplyr::select(sex, male, female) %>%
apaSupp::tab_freq()
levels(df_depress_ref$male)
levels(df_depress_ref$female)
apaSupp::tab_glm_fits(list("Reference = Female" = fit_glm_2_male,
"Reference = Male"  = fit_glm_2_female))
fit_glm_2_male <- glm(satlife ~ male + iq + age + weight,
data = df_depress,
family = binomial(link = "logit"))
fit_glm_2_female <- glm(satlife ~ female + iq + age + weight,
data = df_depress,
family = binomial(link = "logit"))
fit_glm_2_male <- glm(satlife ~ male + iq + age + weight,
data = df_depress_ref,
family = binomial(link = "logit"))
fit_glm_2_female <- glm(satlife ~ female + iq + age + weight,
data = df_depress_ref,
family = binomial(link = "logit"))
apaSupp::tab_glm_fits(list("Reference = Female" = fit_glm_2_male,
"Reference = Male"  = fit_glm_2_female))
apaSupp::tab_glms(list("Reference = Female" = fit_glm_2_male,
"Reference = Male"  = fit_glm_2_female))
apaSupp::tab_glms(list("Reference = Male"  = fit_glm_2_female,
"Reference = Female" = fit_glm_2_male))
)levels(df_depress$sex
levels(df_depress$sex)
anova(fit_glm_1_redo,
fit_glm_2_redo,
test = "LRT")
((38 / 58)/(14 / 7))
fit_glm_1 %>%
emmeans::emmeans(~ sex)
fit_glm_1 %>%
emmeans::emmeans(~ sex) %>%
pairs()
fit_glm_1 %>%
emmeans::emmeans(~ sex,
type = "response")
apaSupp::tab_glm(fit_glm_2,
var_labels = c(sex = "Sex",
iq = "IQ, pts",
age = "Age, yrs",
weight = "Weight, lbs"),
caption = "Parameter Etimates for Logistic Regressing for Life Satisfaction by Sex, Unadjusted Odds Ratio")
df_depress %>%
dplyr::select("IQ, pts" = iq,
"Age, yrs" = age,
"Weight, lbs" = weight) %>%
apaSupp::tab_desc(caption = "Descriptive Summary of Continuous Variables")
df_depress %>%
dplyr::select("Sex" = sex,
"Life Satisfaction" = lifesat) %>%
apaSupp::tab_freq(caption = "Descriptive Summary of Categorical Variables")
df_depress %>%
apaSupp::spicy_histos(var = iq,
split = sex,
lab = "IQ")
df_depress %>%
apaSupp::spicy_histos(var = age,
split = sex,
lab = "Age, yrs")
df_depress %>%
apaSupp::spicy_histos(var = weight,
split = sex,
lab = "Weight, lbs")
df_depress %>%
dplyr::filter(complete.cases(lifesat, sex, iq, age, weight)) %>%
dplyr::select("Satisfaction" = lifesat,
"Sex" = sex,
"IQ, pts" = iq,
"Age, yrs" = age,
"Weight, lbs" = weight) %>%
GGally::ggpairs(aes(colour = Sex),
diag = list(continuous = GGally::wrap("densityDiag",
alpha = .3)),
lower = list(continuous = GGally::wrap("smooth",
shape = 16,
se = FALSE,
size  = 0.75))) +
theme_bw() +
scale_fill_manual(values = c("blue", "coral")) +
scale_color_manual(values = c("blue", "coral"))
df_depress %>%
dplyr::select("Life Satisfaction" = lifesat,
"Sex" = sex,
"IQ, pts" = iq,
"Age, yrs" = age,
"Weight, lbs" = weight) %>%
apaSupp::tab_cor()
df_depress %>%
dplyr::select("Life Satisfaction" = lifesat,
"Sex" = sex,
"IQ, pts" = iq,
"Age, yrs" = age,
"Weight, lbs" = weight) %>%
dplyr::mutate_all(as.numeric) %>%
apaSupp::tab_cor()
df_depress %>%
dplyr::select("Life Satisfaction" = lifesat,
"Sex" = sex,
"IQ, pts" = iq,
"Age, yrs" = age,
"Weight, lbs" = weight) %>%
dplyr::mutate_all(as.numeric) %>%
apaSupp::tab_cor() %>%
flextable::hline(i = 4)
df_depress %>%
dplyr::select("Life Satisfaction" = lifesat,
"Sex" = sex,
"IQ" = iq,
"Age" = age,
"Weight" = weight) %>%
dplyr::mutate_all(as.numeric) %>%
apaSupp::tab_cor() %>%
flextable::hline(i = 4)
df_depress %>%
ggplot(aes(x = age,
y = satlife)) +
geom_count() +
geom_smooth(method = "lm") +
theme_bw() +
labs(x = "Age in Years",
y = "Life Satisfaction, numeric") +
scale_y_continuous(breaks = 0:1,
labels = c("No (0)",
"Yes (1)"))
df_depress %>%
ggplot(aes(x = age,
y = satlife)) +
geom_count() +
geom_smooth(method = "lm") +
theme_bw() +
labs(x = "Age in Years",
y = "Life Satisfaction, numeric") +
facet_grid(~ sex) +
theme(legend.position = "none") +
scale_y_continuous(breaks = 0:1,
labels = c("No (0)",
"Yes (1)"))
df_depress %>%
ggplot(aes(x = iq,
y = satlife)) +
geom_count() +
geom_smooth(method = "lm") +
theme_bw() +
labs(x = "IQ Score",
y = "Life Satisfaction, numeric") +
scale_y_continuous(breaks = 0:1,
labels = c("No (0)",
"Yes (1)"))
df_depress %>%
ggplot(aes(x = weight,
y = satlife)) +
geom_count() +
geom_smooth(method = "lm") +
theme_bw() +
labs(x = "Weight, lbs",
y = "Life Satisfaction, numeric") +
scale_y_continuous(breaks = 0:1,
labels = c("No (0)",
"Yes (1)"))
apaSupp::tab_glms(list("Reference = Male"  = fit_glm_2_female,
"Reference = Female" = fit_glm_2_male),
fit = c("AIC", "BIC"))
apaSupp::tab_glms(list("Reference = Male"  = fit_glm_2_female,
"Reference = Female" = fit_glm_2_male),
fit = c("AIC", "BIC")) %>%
flextable::bold(i = c(3, 9))
apaSupp::tab_glm(fit_glm_2,
var_labels = c(sex = "Sex",
iq = "IQ, pts",
age = "Age, yrs",
weight = "Weight, lbs"),
caption = "Parameter Etimates for Logistic Regressing for Life Satisfaction by Sex, Controlling fro IQ, Age, and Weight") %>%
flextable::bold(j = c(2:4))
apaSupp::tab_glm(fit_glm_2,
var_labels = c(sex = "Sex",
iq = "IQ, pts",
age = "Age, yrs",
weight = "Weight, lbs"),
caption = "Parameter Etimates for Logistic Regressing for Life Satisfaction by Sex, Controlling fro IQ, Age, and Weight") %>%
flextable::bold(i = c(2:4))
apaSupp::tab_glm(fit_glm_2)
apaSupp::tab_glm(fit_glm_2, fit = c("AIC", "BIC", "RMSEA"))
apaSupp::tab_glm(fit_glm_2, fit = c("AIC", "BIC"))
apaSupp::tab_glm(fit_glm_2, vif = FALSE, lrt = fALSE)
apaSupp::tab_glm(fit_glm_2, vif = FALSE, lrt = FALSE)
apaSupp::tab_glms(list(fit_glm_1_redo, fit_glm_2_redo))
apaSupp::tab_glms(list("Univariate"   = fit_glm_1_redo,
"Multivariate" = fit_glm_2_redo),
var_labels = c(iq = "IQ Score",
age = "Age, yrs",
weight = "Weight, lbs")
fit = c("AIC", "BIC"),
apaSupp::tab_glms(list("Univariate"   = fit_glm_1_redo,
"Multivariate" = fit_glm_2_redo),
var_labels = c(iq = "IQ Score",
age = "Age, yrs",
weight = "Weight, lbs"),
fit = c("AIC", "BIC"),
narrow = TRUE)
apaSupp::tab_glms(list("Univariate"   = fit_glm_1_redo,
"Multivariate" = fit_glm_2_redo),
var_labels = c(sex = "Sex",
iq = "IQ Score",
age = "Age, yrs",
weight = "Weight, lbs"),
fit = c("AIC", "BIC"),
narrow = TRUE)
apaSupp::tab_glms(list("Univariate"   = fit_glm_1_redo,
"Multivariate" = fit_glm_2_redo),
var_labels = c(sex = "Sex",
iq = "IQ Score",
age = "Age, yrs",
weight = "Weight, lbs"),
fit = c("AIC", "BIC"),
narrow = TRUE) %>%
flextable::bold(i = 3)
