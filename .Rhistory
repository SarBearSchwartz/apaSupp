y$table_body
y$table_body
x %>%
gtsummary::tbl_regression(intercept       = TRUE,
conf.int        = FALSE,
exponentiate    = FALSE,
pvalue_fun      = function(x) apaSupp::p_num(x, d = d + 1),
tidy_fun        = broom.helpers::tidy_with_broom_or_parameters,
show_single_row = show_single_row) %>%
gtsummary::modify_column_unhide(column = std.error) %>%
gtsummary::remove_abbreviation("SE = Standard Error")  %>%
gtsummary::remove_footnote_header() %>%
gtsummary::modify_fmt_fun(estimate  ~ function(x) apaSupp::p_num(x, d = (d + 1), stars = FALSE), rows =  stringr::str_detect(variable, "r.")) %>%
gtsummary::modify_fmt_fun(estimate  ~ function(x) apaSupp::p_num(x, d = (d - 1), stars = FALSE), rows = !stringr::str_detect(variable, "r.")) %>%
gtsummary::modify_fmt_fun(estimate  ~ gtsummary::label_style_number(digits = d),        rows = (row_type == "label") ) %>%
gtsummary::modify_fmt_fun(std.error ~ gtsummary::label_style_number(digits = d,         prefix = "(", suffix = ")"))
x %>%
gtsummary::tbl_regression(intercept       = TRUE,
conf.int        = FALSE,
exponentiate    = FALSE,
pvalue_fun      = function(x) apaSupp::p_num(x, d = d + 1),
tidy_fun        = broom.helpers::tidy_with_broom_or_parameters,
show_single_row = show_single_row) %>%
gtsummary::modify_column_unhide(column = std.error) %>%
gtsummary::remove_abbreviation("SE = Standard Error")  %>%
gtsummary::remove_footnote_header() %>%
gtsummary::modify_fmt_fun(estimate  ~ function(x) apaSupp::p_num(x, d = (d + 1), stars = FALSE), rows =  stringr::str_detect(variable, "r.")) %>%
gtsummary::modify_fmt_fun(estimate  ~ function(x) apaSupp::p_num(x, d = (d - 1), stars = FALSE), rows = !stringr::str_detect(variable, "r.")) %>%
gtsummary::modify_fmt_fun(estimate  ~ gtsummary::label_style_number(digits = d)) %>%
gtsummary::modify_fmt_fun(std.error ~ gtsummary::label_style_number(digits = d,         prefix = "(", suffix = ")"))
#' APA: flextable for a GEE models (specifically logisitic right now)
#'
#' @param x REQUIRED: a gee models, bare name
#' @param var_labels Optional: Vector. Text replacements for model terms, "old" = "new"
#' @param caption Optional: Text. Caption for the table
#' @param docx Optional: filename. must end with ".docx"
#' @param tab_width Optional: numeric value (default is .9) % of available width
#' @param general_note Optional: Text. General note for footer of APA table
#' @param p_note Optional: Text. (default = NULL) Significance note for APA table, If `p_note = "apa123"` then the standard `"* p < .05. ** p < .01. *** p < .001."` will be used
#' @param no_notes REQUIRED: Logical.  Defaults to `FALSE`, if `TRUE` will ignore `general_note` and `p_note`
#' @param d Optional: Number. Digits after the decimal place
#' @param show_single_row	 a variable is dichotomous (e.g. Yes/No) and you wish to print the regression coefficient on a single row, include the variable name(s) here.
#' @param breaks Optional: numeric vector of p-value cut-points
#' @param symbols Optional: character vector for symbols denoting p-value cut-points
#'
#' @returns a flextable object
#' @import gtsummary
#' @import flextable
#' @import tidyverse
#' @import broom.helpers
#' @export
#'
#' @examples
#'
#'library(tidyverse)
#'
#' mtcars <- mtcars %>% dplyr::mutate(am = factor(am))
#'
#' fit_glm1 <- glm(vs ~ am, data = mtcars, family = "binomial")
#' fit_glm2 <- glm(vs ~ wt + mpg + am, data = mtcars, family = "binomial")
#'
#' apaSupp::tab_glm(fit_glm1)
#' apaSupp::tab_glm(fit_glm2)
#'
#' apaSupp::tab_glm(fit_glm2, vif = FALSE)
#' apaSupp::tab_glm(fit_glm2, lrt = FALSE)
#' apaSupp::tab_glm(fit_glm2, vif = FALSE, lrt = FALSE)
#'
#' apaSupp::tab_glm(fit_glm2, pr2 = "both")
#' apaSupp::tab_glm(fit_glm2, pr2 = "tjur")
#' apaSupp::tab_glm(fit_glm2, pr2 = "mcfadden")
#' apaSupp::tab_glm(fit_glm2, pr2 = "none")
#'
#'
#' apaSupp::tab_glm(fit_glm2, fit = c("AIC", "BIC"))
#' apaSupp::tab_glm(fit_glm2, pr2 = "both", fit = c("AIC", "BIC"))
#'
#'
tab_gee <- function(x,
var_labels      = NULL,
caption         = "Parameter Estimates for Generalized Linear Regression",
docx            = NA,
tab_width       = .9,
general_note    = NA,
p_note          = "apa123",
no_notes        = FALSE,
d               = 2,
show_single_row = NULL,
breaks          = c(.05, .01, .001),
symbols         = c("*", "**", "***")){
if (family(x)$link == "logit"){
back_trans <- "exp"
abr <- c("Odds Ratio","Logit Scale")
sym <- c("OR", "b")
int <- FALSE
} else if (family(x)$family == "poisson" & family(x)$link == "log") {
back_trans <- "exp"
abr <- c("Incident Rate Ratio","Log Scale")
sym <- c("IRR", "b")
pr2 <- "nagelkerke"
int <- TRUE
} else if (family(x)$family == "poisson" & family(x)$link == "log"){
back_trans <- "exp"
abr <- c("Incident Rate Ratio","Log Scale")
sym <- c("IRR", "b")
}
n_obs   <- length(x$resid)
n_param <- length(coef(x))
main_note <- flextable::as_paragraph(
flextable::as_i("Note. "),
flextable::as_chunk(glue::glue("N = {n_obs}. ")),
flextable::as_chunk(general_note)
)
if (back_trans == "exp"){
get_tran <- x %>%
gtsummary::tbl_regression(intercept = int,
conf.int = TRUE,
exponentiate = TRUE,
tidy_fun = broom.helpers::tidy_with_broom_or_parameters,
show_single_row = all_of(show_single_row)) %>%
gtsummary::modify_column_hide(column = std.error) %>%
gtsummary::modify_column_hide(column = p.value) %>%
gtsummary::modify_fmt_fun(estimate  ~ gtsummary::label_style_number(digits = d)) %>%
gtsummary::modify_fmt_fun(conf.low  ~ gtsummary::label_style_number(digits = d, prefix = "[")) %>%
gtsummary::modify_fmt_fun(conf.high ~ gtsummary::label_style_number(digits = d, suffix = "]")) %>%
gtsummary::remove_abbreviation("CI = Confidence Interval") %>%
gtsummary::remove_abbreviation("SE = Standard Error")  %>%
gtsummary::modify_table_body(~.x %>%
dplyr::mutate(estimate = ifelse(variable == "(Intercept)" & int == FALSE, NA, estimate)) %>%
dplyr::mutate(conf.low = ifelse(variable == "(Intercept)" & int == FALSE, NA, conf.low))) %>%
gtsummary::modify_table_body(~.x %>% dplyr::mutate(bk = NA)) %>%
gtsummary::modify_header(label = "Variable",
estimate = sym[1],
conf.low = "95% CI",
bk = "blank")
}
if (family(x)$link == "logit"){
get_tran <- get_tran %>%
gtsummary::remove_abbreviation("OR = Odds Ratio")
} else if (family(x)$family == "poisson"){
get_tran <- get_tran %>%
gtsummary::remove_abbreviation("IRR = Incidence Rate Ratio")
}
if (!is.null(fit)){
get_tran <- get_tran %>% gtsummary::add_glance_table(include = all_of(fit))
}
get <- x %>%
gtsummary::tbl_regression(intercept       = TRUE,
conf.int        = FALSE,
exponentiate    = FALSE,
pvalue_fun      = function(x) apaSupp::p_num(x, d = d + 1),
tidy_fun        = broom.helpers::tidy_with_broom_or_parameters,
show_single_row = show_single_row) %>%
gtsummary::modify_column_unhide(column = std.error) %>%
gtsummary::remove_abbreviation("SE = Standard Error")  %>%
gtsummary::remove_footnote_header() %>%
gtsummary::modify_fmt_fun(estimate  ~ function(x) apaSupp::p_num(x, d = (d + 1), stars = FALSE), rows =  stringr::str_detect(variable, "r.")) %>%
gtsummary::modify_fmt_fun(estimate  ~ function(x) apaSupp::p_num(x, d = (d - 1), stars = FALSE), rows = !stringr::str_detect(variable, "r.")) %>%
gtsummary::modify_fmt_fun(estimate  ~ gtsummary::label_style_number(digits = d)) %>%
gtsummary::modify_fmt_fun(std.error ~ gtsummary::label_style_number(digits = d,         prefix = "(", suffix = ")"))
if (family(x)$link == "logit"){
get <- get %>%
gtsummary::remove_abbreviation("OR = Odds Ratio")
} else if (family(x)$family == "poisson"){
get <- get %>%
gtsummary::remove_abbreviation("IRR = Incidence Rate Ratio")
}
get_orig <- get %>%
gtsummary::modify_column_hide(column = starts_with("p")) %>%
gtsummary::modify_table_body(~.x %>% dplyr::mutate(bk = NA)) %>%
gtsummary::modify_header(label    = "Variable",
estimate = sym[2],
conf.low = "95% CI",
bk       = "blank")
get_sig <- get %>%
gtsummary::modify_column_hide(column = estimate) %>%
gtsummary::modify_column_hide(column = std.error)
table <- list(get_tran,  get_orig,  get_sig) %>%
gtsummary::tbl_merge(tab_spanner = c(abr[1],  abr[2],  "p")) %>%
gtsummary::as_flex_table() %>%
flextable::compose(part = "header", j = c(4, 7), value = flextable::as_paragraph(NA)) %>%
flextable::compose(part = "body",   j = c(4, 7), value = flextable::as_paragraph(NA))
if(!is.null(var_labels)){ table <- table %>% flextable::labelizor(part = "body", labels = var_labels)}
n_col  <- flextable::ncol_keys(table)
n_rows <- flextable::nrow_part(table, part = "body")
table <- table %>%
flextable::compose(part = "header", i = 1, j = 8, value = flextable::as_paragraph(NA)) %>%
flextable::compose(part = "header", i = 2, j = 8, value = flextable::as_paragraph(flextable::as_i("p")))
n_rows <- flextable::nrow_part(table, part = "body")
table <- table  %>%
flextable::delete_rows(part = "header", i = 1) %>%
flextable::add_header_row(values    = c(NA, abr[1], NA, abr[2], rep(NA, n_col - 6)),
colwidths = c( 1,     2,   1,     2,  rep( 1, n_col - 6))) %>%
apaSupp::theme_apa(caption      = caption,
main_note    = main_note,
p_note       = p_note,
d            = d,
breaks       = breaks,
symbols      = symbols) %>%
flextable::italic(part = "header", i = 2, j = 4:5) %>%
flextable::align( part = "all",           j = c(2, 5), align = "right") %>%
flextable::align( part = "all",           j = c(3, 6), align = "left") %>%
flextable::align( part = "header", i = 1,              align = "center") %>%
flextable::align( part = "footer",                     align = "left") %>%
flextable::hline( part = "header", i = 1, border = flextable::fp_border_default(width = 0)) %>%
flextable::hline( part = "header", i = 1, j = 2:3) %>%
flextable::hline( part = "header", i = 1, j = 5:6)%>%
flextable::set_table_properties(layout = "autofit",
width = tab_width)
if (!is.na(docx)){
flextable::save_as_docx(table,
path = docx)
}
return(table)
}
#######################################################################################################
library(HSAUR)
library(tidyverse)
library(gee)
library(geepack)
data("respiratory", package = "HSAUR")
data_wide <- respiratory %>%
tidyr::spread(key = month,
value = status,
sep = "_") %>%
dplyr::rename("BL_status" = "month_0") %>%
dplyr::arrange(subject) %>%
dplyr::select(subject, centre,
sex, age, treatment,
BL_status, starts_with("month"))
data_long <- data_wide%>%
tidyr::gather(key = month,
value = status,
starts_with("month")) %>%
dplyr::mutate(month = str_sub(month, start = -1) %>% as.numeric) %>%
dplyr::mutate(status = case_when(status == "poor" ~ 0,
status == "good" ~ 1)) %>%
dplyr::arrange(subject, month) %>%
dplyr::select(subject, centre, sex, age, treatment, BL_status, month, status)
resp_gee_ex <- gee::gee(status ~ centre + treatment + sex + BL_status +
I(age-33) + I((age-33)^2),
data = data_long,
family = binomial(link = "logit"),
id = subject,
corstr = "exchangeable",
scale.fix = TRUE,
scale.value = 1)
resp_geeglm_ex <- geepack::geeglm(status ~ centre + treatment + sex + BL_status +
I(age-33) + I((age-33)^2),
data = data_long,
family = binomial(link = "logit"),
id = subject,
waves = month,
corstr = "exchangeable")
tab_gee(resp_geeglm_ex)
resp_geeglm2_ex <- geepack::geeglm(status ~ treatment + sex + BL_status,
data = data_long,
family = binomial(link = "logit"),
id = subject,
waves = month,
corstr = "exchangeable")
tab_gee(resp_geeglm2_ex)
x %>%
gtsummary::tbl_regression(intercept       = TRUE,
conf.int        = FALSE,
exponentiate    = FALSE,
pvalue_fun      = function(x) apaSupp::p_num(x, d = d + 1),
tidy_fun        = broom.helpers::tidy_with_broom_or_parameters,
show_single_row = show_single_row) %>%
gtsummary::modify_column_unhide(column = std.error) %>%
gtsummary::remove_abbreviation("SE = Standard Error")  %>%
gtsummary::remove_footnote_header() %>%
gtsummary::modify_fmt_fun(estimate  ~ function(x) apaSupp::p_num(x, d = (d + 1), stars = FALSE), rows =  stringr::str_detect(variable, "r.")) %>%
gtsummary::modify_fmt_fun(estimate  ~ function(x) apaSupp::p_num(x, d = (d - 1), stars = FALSE), rows = !stringr::str_detect(variable, "r.")) %>%
gtsummary::modify_fmt_fun(estimate  ~ gtsummary::label_style_number(digits = d)) %>%
gtsummary::modify_fmt_fun(std.error ~ gtsummary::label_style_number(digits = d,         prefix = "(", suffix = ")")) %>%
gtsummary::modify_header(std.error = "(SE)")
source("C:/Users/A00315273/GitHub/apaSupp/R/tab_gee.R", echo = TRUE)
#' APA: flextable for a GEE models (specifically logisitic right now)
#'
#' @param x REQUIRED: a gee models, bare name
#' @param var_labels Optional: Vector. Text replacements for model terms, "old" = "new"
#' @param caption Optional: Text. Caption for the table
#' @param docx Optional: filename. must end with ".docx"
#' @param tab_width Optional: numeric value (default is .9) % of available width
#' @param general_note Optional: Text. General note for footer of APA table
#' @param p_note Optional: Text. (default = NULL) Significance note for APA table, If `p_note = "apa123"` then the standard `"* p < .05. ** p < .01. *** p < .001."` will be used
#' @param no_notes REQUIRED: Logical.  Defaults to `FALSE`, if `TRUE` will ignore `general_note` and `p_note`
#' @param d Optional: Number. Digits after the decimal place
#' @param show_single_row	 a variable is dichotomous (e.g. Yes/No) and you wish to print the regression coefficient on a single row, include the variable name(s) here.
#' @param breaks Optional: numeric vector of p-value cut-points
#' @param symbols Optional: character vector for symbols denoting p-value cut-points
#'
#' @returns a flextable object
#' @import gtsummary
#' @import flextable
#' @import tidyverse
#' @import broom.helpers
#' @export
#'
#' @examples
#'
#'library(tidyverse)
#'
#' mtcars <- mtcars %>% dplyr::mutate(am = factor(am))
#'
#' fit_glm1 <- glm(vs ~ am, data = mtcars, family = "binomial")
#' fit_glm2 <- glm(vs ~ wt + mpg + am, data = mtcars, family = "binomial")
#'
#' apaSupp::tab_glm(fit_glm1)
#' apaSupp::tab_glm(fit_glm2)
#'
#' apaSupp::tab_glm(fit_glm2, vif = FALSE)
#' apaSupp::tab_glm(fit_glm2, lrt = FALSE)
#' apaSupp::tab_glm(fit_glm2, vif = FALSE, lrt = FALSE)
#'
#' apaSupp::tab_glm(fit_glm2, pr2 = "both")
#' apaSupp::tab_glm(fit_glm2, pr2 = "tjur")
#' apaSupp::tab_glm(fit_glm2, pr2 = "mcfadden")
#' apaSupp::tab_glm(fit_glm2, pr2 = "none")
#'
#'
#' apaSupp::tab_glm(fit_glm2, fit = c("AIC", "BIC"))
#' apaSupp::tab_glm(fit_glm2, pr2 = "both", fit = c("AIC", "BIC"))
#'
#'
tab_gee <- function(x,
var_labels      = NULL,
caption         = "Parameter Estimates for Generalized Linear Regression",
docx            = NA,
tab_width       = .9,
general_note    = NA,
p_note          = "apa123",
no_notes        = FALSE,
d               = 2,
show_single_row = NULL,
breaks          = c(.05, .01, .001),
symbols         = c("*", "**", "***")){
if (family(x)$link == "logit"){
back_trans <- "exp"
abr <- c("Odds Ratio","Logit Scale")
sym <- c("OR", "b")
int <- FALSE
} else if (family(x)$family == "poisson" & family(x)$link == "log") {
back_trans <- "exp"
abr <- c("Incident Rate Ratio","Log Scale")
sym <- c("IRR", "b")
pr2 <- "nagelkerke"
int <- TRUE
} else if (family(x)$family == "poisson" & family(x)$link == "log"){
back_trans <- "exp"
abr <- c("Incident Rate Ratio","Log Scale")
sym <- c("IRR", "b")
}
n_obs   <- length(x$resid)
n_param <- length(coef(x))
main_note <- flextable::as_paragraph(
flextable::as_i("Note. "),
flextable::as_chunk(glue::glue("N = {n_obs}. ")),
flextable::as_chunk(general_note)
)
if (back_trans == "exp"){
get_tran <- x %>%
gtsummary::tbl_regression(intercept = int,
conf.int = TRUE,
exponentiate = TRUE,
tidy_fun = broom.helpers::tidy_with_broom_or_parameters,
show_single_row = all_of(show_single_row)) %>%
gtsummary::modify_column_hide(column = std.error) %>%
gtsummary::modify_column_hide(column = p.value) %>%
gtsummary::modify_fmt_fun(estimate  ~ gtsummary::label_style_number(digits = d)) %>%
gtsummary::modify_fmt_fun(conf.low  ~ gtsummary::label_style_number(digits = d, prefix = "[")) %>%
gtsummary::modify_fmt_fun(conf.high ~ gtsummary::label_style_number(digits = d, suffix = "]")) %>%
gtsummary::remove_abbreviation("CI = Confidence Interval") %>%
gtsummary::remove_abbreviation("SE = Standard Error")  %>%
gtsummary::modify_table_body(~.x %>%
dplyr::mutate(estimate = ifelse(variable == "(Intercept)" & int == FALSE, NA, estimate)) %>%
dplyr::mutate(conf.low = ifelse(variable == "(Intercept)" & int == FALSE, NA, conf.low))) %>%
gtsummary::modify_table_body(~.x %>% dplyr::mutate(bk = NA)) %>%
gtsummary::modify_header(label = "Variable",
estimate = sym[1],
conf.low = "95% CI",
bk = "blank")
}
if (family(x)$link == "logit"){
get_tran <- get_tran %>%
gtsummary::remove_abbreviation("OR = Odds Ratio")
} else if (family(x)$family == "poisson"){
get_tran <- get_tran %>%
gtsummary::remove_abbreviation("IRR = Incidence Rate Ratio")
}
if (!is.null(fit)){
get_tran <- get_tran %>% gtsummary::add_glance_table(include = all_of(fit))
}
get <- x %>%
gtsummary::tbl_regression(intercept       = TRUE,
conf.int        = FALSE,
exponentiate    = FALSE,
pvalue_fun      = function(x) apaSupp::p_num(x, d = d + 1),
tidy_fun        = broom.helpers::tidy_with_broom_or_parameters,
show_single_row = show_single_row) %>%
gtsummary::modify_column_unhide(column = std.error) %>%
gtsummary::remove_abbreviation("SE = Standard Error")  %>%
gtsummary::remove_footnote_header() %>%
gtsummary::modify_fmt_fun(estimate  ~ function(x) apaSupp::p_num(x, d = (d + 1), stars = FALSE), rows =  stringr::str_detect(variable, "r.")) %>%
gtsummary::modify_fmt_fun(estimate  ~ function(x) apaSupp::p_num(x, d = (d - 1), stars = FALSE), rows = !stringr::str_detect(variable, "r.")) %>%
gtsummary::modify_fmt_fun(estimate  ~ gtsummary::label_style_number(digits = d)) %>%
gtsummary::modify_fmt_fun(std.error ~ gtsummary::label_style_number(digits = d,         prefix = "(", suffix = ")")) %>%
gtsummary::modify_header(std.error = "(SE)")
if (family(x)$link == "logit"){
get <- get %>%
gtsummary::remove_abbreviation("OR = Odds Ratio")
} else if (family(x)$family == "poisson"){
get <- get %>%
gtsummary::remove_abbreviation("IRR = Incidence Rate Ratio")
}
get_orig <- get %>%
gtsummary::modify_column_hide(column = starts_with("p")) %>%
gtsummary::modify_table_body(~.x %>% dplyr::mutate(bk = NA)) %>%
gtsummary::modify_header(label    = "Variable",
estimate = sym[2],
conf.low = "95% CI",
bk       = "blank")
get_sig <- get %>%
gtsummary::modify_column_hide(column = estimate) %>%
gtsummary::modify_column_hide(column = std.error)
table <- list(get_tran,  get_orig,  get_sig) %>%
gtsummary::tbl_merge(tab_spanner = c(abr[1],  abr[2],  "p")) %>%
gtsummary::as_flex_table() %>%
flextable::compose(part = "header", j = c(4, 7), value = flextable::as_paragraph(NA)) %>%
flextable::compose(part = "body",   j = c(4, 7), value = flextable::as_paragraph(NA))
if(!is.null(var_labels)){ table <- table %>% flextable::labelizor(part = "body", labels = var_labels)}
n_col  <- flextable::ncol_keys(table)
n_rows <- flextable::nrow_part(table, part = "body")
table <- table %>%
flextable::compose(part = "header", i = 1, j = 8, value = flextable::as_paragraph(NA)) %>%
flextable::compose(part = "header", i = 2, j = 8, value = flextable::as_paragraph(flextable::as_i("p")))
n_rows <- flextable::nrow_part(table, part = "body")
table <- table  %>%
flextable::delete_rows(part = "header", i = 1) %>%
flextable::add_header_row(values    = c(NA, abr[1], NA, abr[2], rep(NA, n_col - 6)),
colwidths = c( 1,     2,   1,     2,  rep( 1, n_col - 6))) %>%
apaSupp::theme_apa(caption      = caption,
main_note    = main_note,
p_note       = p_note,
d            = d,
breaks       = breaks,
symbols      = symbols) %>%
flextable::italic(part = "header", i = 2, j = 4:5) %>%
flextable::align( part = "all",           j = c(2, 5), align = "right") %>%
flextable::align( part = "all",           j = c(3, 6), align = "left") %>%
flextable::align( part = "header", i = 1,              align = "center") %>%
flextable::align( part = "footer",                     align = "left") %>%
flextable::hline( part = "header", i = 1, border = flextable::fp_border_default(width = 0)) %>%
flextable::hline( part = "header", i = 1, j = 2:3) %>%
flextable::hline( part = "header", i = 1, j = 5:6)%>%
flextable::set_table_properties(layout = "autofit",
width = tab_width)
if (!is.na(docx)){
flextable::save_as_docx(table,
path = docx)
}
return(table)
}
#######################################################################################################
library(HSAUR)
library(tidyverse)
library(gee)
library(geepack)
data("respiratory", package = "HSAUR")
data_wide <- respiratory %>%
tidyr::spread(key = month,
value = status,
sep = "_") %>%
dplyr::rename("BL_status" = "month_0") %>%
dplyr::arrange(subject) %>%
dplyr::select(subject, centre,
sex, age, treatment,
BL_status, starts_with("month"))
data_long <- data_wide%>%
tidyr::gather(key = month,
value = status,
starts_with("month")) %>%
dplyr::mutate(month = str_sub(month, start = -1) %>% as.numeric) %>%
dplyr::mutate(status = case_when(status == "poor" ~ 0,
status == "good" ~ 1)) %>%
dplyr::arrange(subject, month) %>%
dplyr::select(subject, centre, sex, age, treatment, BL_status, month, status)
resp_gee_ex <- gee::gee(status ~ centre + treatment + sex + BL_status +
I(age-33) + I((age-33)^2),
data = data_long,
family = binomial(link = "logit"),
id = subject,
corstr = "exchangeable",
scale.fix = TRUE,
scale.value = 1)
resp_geeglm_ex <- geepack::geeglm(status ~ centre + treatment + sex + BL_status +
I(age-33) + I((age-33)^2),
data = data_long,
family = binomial(link = "logit"),
id = subject,
waves = month,
corstr = "exchangeable")
tab_gee(resp_geeglm_ex)
resp_geeglm2_ex <- geepack::geeglm(status ~ treatment + sex + BL_status,
data = data_long,
family = binomial(link = "logit"),
id = subject,
waves = month,
corstr = "exchangeable")
tab_gee(resp_geeglm2_ex)
load("C:/Users/A00315273/Box/HAMMOND DISSERTATION/CCMS_toUPDBvm/Hammond_diss_ccms_data_wrangled_wide_2023-06-28.RData")
