#' apaSupp::tab_glms(list(fit_glm1, fit_glm2))
#' apaSupp::tab_glms(list("M1" = fit_glm1, "M2" = fit_glm2))
#' apaSupp::tab_glms(list("M1" = fit_glm1, "M2" = fit_glm2), narrow = TRUE)
#' apaSupp::tab_glms(list("M1" = fit_glm1, "M2" = fit_glm2), narrow = TRUE, fit = c("AIC", "BIC"))
#'
#'
tab_glms <- function(x,
var_labels = NULL,
caption = "Compare Regression Models",
narrow = FALSE,
p_note = "apa",
general_note = NULL,
fit = NA,
d = 2){
n_param <- x %>%
purrr::map(coef) %>%
purrr::map(length) %>%
unlist() %>%
max()
n_models <- length(x)
n_fit   <- sum(!is.na(fit))
if(is.null(names(x))){
mod_names <- paste("Model", 1:n_models)
}else{
mod_names <- names(x)
}
get <- x %>%
purrr::map(apaSupp::gt_glm,
narrow = narrow,
fit = fit,
d = d) %>%
gtsummary::tbl_merge(tab_spanner = mod_names) %>%
gtsummary::modify_table_body(~ .x %>%
dplyr::arrange(row_type == "glance_statistic"))
table <- get %>%
gtsummary::as_flex_table()
n_rows <- flextable::nrow_part(table, part = "body")
table <- table %>%
apaSupp::theme_apa(caption = caption,
p_note = p_note,
general_note = general_note) %>%
flextable::bold(part = "header", i = 1) %>%
flextable::italic(part = "header", i = 2) %>%
flextable::align(part = "header", i = 1, align = "center")
if(n_fit > 0){
table <- table %>%
flextable::italic(part = "body", i = (n_rows + 1 - n_fit):(n_rows)) %>%
flextable::hline(part = "body", i = (n_rows - n_fit))
}
n_rows <- flextable::nrow_part(table, part = "body")
if (narrow == FALSE){
table <- table %>%
flextable::align(part = "all",
j = seq(from = 2, to = 3*n_models, by = 3),
align = "right") %>%
flextable::align(part = "all",
j = seq(from = 3, to = (3*n_models + 1), by = 3),
align = "left")
} else {
table <- table %>%
flextable::align(part = "all",
j = seq(from = 2, to = 2*n_models, by = 2),
align = "right") %>%
flextable::align(part = "all",
j = seq(from = 3, to = (2*n_models + 1), by = 2),
align = "left")
}
if(!is.null(var_labels)){
table <- table %>%
flextable::labelizor(part = "body",
labels = var_labels)
}
table <- table %>%
flextable::align(part = "header", i = 1, align = "center") %>%
flextable::align(part = "footer", align = "left") %>%
flextable::hline(part = "header", i = 1,
border = flextable::fp_border_default(width = 0))
return(table)
}
source("C:/Users/A00315273/GitHub/apaSupp/R/tab_glms.R", echo=TRUE)
x = list("M1" = fit_glm1, "M2" = fit_glm2)
library(tidyverse)
mtcars <- mtcars %>% dplyr::mutate(cyl = factor(cyl))
fit_glm2 <- glm(vs ~ wt + mpg + cyl, data = mtcars, family = "binomial")
tab_glms(list(fit_glm1, fit_glm2))
#' APA: flextable for 2-3 generalized linear models
#'
#' @param x REQUIRED: List. at least 2 glm models, bare names
#' @param var_labels Optional: Vector. Text replacements for model terms, "old" = "new"
#' @param caption Optional: Text. Caption for the table
#' @param narrow  Optional. Logical. Default = FALSE, but TRUE will exclude p-vlaues from the table to make it narrower
#' @param p_note Optional: Text. (default = NULL) Significance note for APA table, If p_note = "apa" then the standard "* p < .05. ** p < .01. *** p < .001." will be used
#' @param general_note Optional: Text. General note for footer of APA table
#' @param fit Optional: vector. quoted names of fit statistics to include, can be: "r.squared", "adj.r.squared", "sigma", "statistic","p.value", "df", "logLik", "AIC", "BIC", "deviance", "df.residual", and "nobs"
#' @param d Optional: Number. Digits after the decimal place
#'
#' @returns a flextable object
#' @import gtsummary
#' @import flextable
#' @import tidyverse
#' @import broom.helpers
#' @export
#'
#' @examples
#'
#' library(tidyverse)
#'
#' mtcars <- mtcars %>% dplyr::mutate(cyl = factor(cyl))
#'
#' fit_glm1 <- glm(vs ~ wt, data = mtcars, family = "binomial")
#' fit_glm2 <- glm(vs ~ wt + mpg + cyl, data = mtcars, family = "binomial")
#'
#' apaSupp::tab_glms(list(fit_glm1, fit_glm2))
#' apaSupp::tab_glms(list("M1" = fit_glm1, "M2" = fit_glm2))
#' apaSupp::tab_glms(list("M1" = fit_glm1, "M2" = fit_glm2), narrow = TRUE)
#' apaSupp::tab_glms(list("M1" = fit_glm1, "M2" = fit_glm2), narrow = TRUE, fit = c("AIC", "BIC"))
#'
#'
tab_glms <- function(x,
var_labels = NULL,
caption = "Compare Regression Models",
narrow = FALSE,
p_note = "apa",
general_note = NULL,
fit = NA,
d = 2){
n_param <- x %>%
purrr::map(coef) %>%
purrr::map(length) %>%
unlist() %>%
max()
n_models <- length(x)
n_fit   <- sum(!is.na(fit))
if(is.null(names(x))){
mod_names <- paste("Model", 1:n_models)
}else{
mod_names <- names(x)
}
get <- x %>%
purrr::map(apaSupp::gt_glm,
narrow = narrow,
fit = fit,
d = d) %>%
gtsummary::tbl_merge(tab_spanner = mod_names) %>%
gtsummary::modify_table_body(~ .x %>%
dplyr::arrange(row_type == "glance_statistic"))
table <- get %>%
gtsummary::as_flex_table()
n_rows <- flextable::nrow_part(table, part = "body")
table <- table %>%
apaSupp::theme_apa(caption = caption,
p_note = p_note,
general_note = general_note) %>%
flextable::bold(part = "header", i = 1) %>%
flextable::italic(part = "header", i = 2) %>%
flextable::align(part = "header", i = 1, align = "center")
if(n_fit > 0){
table <- table %>%
flextable::italic(part = "body", i = (n_rows + 1 - n_fit):(n_rows)) %>%
flextable::hline(part = "body", i = (n_rows - n_fit))
}
n_rows <- flextable::nrow_part(table, part = "body")
if (narrow == FALSE){
table <- table %>%
flextable::align(part = "all",
j = seq(from = 2, to = 3*n_models, by = 3),
align = "right") %>%
flextable::align(part = "all",
j = seq(from = 3, to = (3*n_models + 1), by = 3),
align = "left")
} else {
table <- table %>%
flextable::align(part = "all",
j = seq(from = 2, to = 2*n_models, by = 2),
align = "right") %>%
flextable::align(part = "all",
j = seq(from = 3, to = (2*n_models + 1), by = 2),
align = "left")
}
if(!is.null(var_labels)){
table <- table %>%
flextable::labelizor(part = "body",
labels = var_labels)
}
table <- table %>%
flextable::align(part = "header", i = 1, align = "center") %>%
flextable::align(part = "footer", align = "left") %>%
flextable::hline(part = "header", i = 1,
border = flextable::fp_border_default(width = 0))
return(table)
}
tab_glms(list(fit_glm1, fit_glm2))
fit_glm1 <- glm(vs ~ wt, data = mtcars, family = "binomial")
tab_glms(list(fit_glm1, fit_glm2))
var_labels = NULL
caption = "Compare Regression Models"
narrow = TRUE
p_note = "apa"
general_note = NULL
fit = c("AIC", "BIC")
d = 2
n_param <- x %>%
purrr::map(coef) %>%
purrr::map(length) %>%
unlist() %>%
max()
x = list("M1" = fit_glm1, "M2" = fit_glm2)
n_param <- x %>%
purrr::map(coef) %>%
purrr::map(length) %>%
unlist() %>%
max()
n_param
fit_glm2
n_fit   <- sum(!is.na(fit))
n_fit
if(is.null(names(x))){
mod_names <- paste("Model", 1:n_models)
}else{
mod_names <- names(x)
}
mod_names
x %>%
purrr::map(apaSupp::gt_glm,
narrow = narrow,
fit = fit,
d = d) %>%
gtsummary::tbl_merge(tab_spanner = mod_names) %>%
gtsummary::modify_table_body(~ .x %>%
dplyr::arrange(row_type == "glance_statistic"))
x %>%
purrr::map(apaSupp::gt_glm,
narrow = narrow,
fit = fit,
d = d)
list(x[[1]], x[[2]]) %>%
purrr::map(apaSupp::gt_glm,
narrow = narrow,
fit = fit,
d = d)
x = fit_glm2
narrow
fit
if (narrow == FALSE){
p_fun <- function(x, d) apaSupp::p_num(x, d = d + 1)
} else {
p_fun <- function(x, d = d) apaSupp::p_star(x)
}
table <- x %>%
gtsummary::tbl_regression(intercept = FALSE,
conf.int = TRUE,
exponentiate = TRUE,
pvalue_fun = ~ p_fun(.x, d = d),
tidy_fun = broom.helpers::tidy_with_broom_or_parameters)
table
warnings()
if (sum(!is.na(fit)) > 0){
table <- table %>%
gtsummary::add_glance_table(include = fit)
}
broom::glance(x)
table %>%
gtsummary::add_glance_table(include = fit)
if (sum(!is.na(fit)) > 0){
table <- table %>%
gtsummary::add_glance_table(include = fit)
}
table %>%
gtsummary::modify_column_hide(column = std.error) %>%
gtsummary::modify_fmt_fun(estimate ~
gtsummary::label_style_number(digits = d)) %>%
gtsummary::modify_fmt_fun(conf.low ~
gtsummary::label_style_number(digits = d,
prefix = "[")) %>%
gtsummary::modify_fmt_fun(conf.high ~
gtsummary::label_style_number(digits = d,
suffix = "]")) %>%
gtsummary::remove_abbreviation("OR = Odds Ratio") %>%
gtsummary::remove_abbreviation("CI = Confidence Interval") %>%
gtsummary::remove_abbreviation("SE = Standard Error")
table <- table %>%
gtsummary::modify_column_hide(column = std.error) %>%
gtsummary::modify_fmt_fun(estimate ~
gtsummary::label_style_number(digits = d)) %>%
gtsummary::modify_fmt_fun(conf.low ~
gtsummary::label_style_number(digits = d,
prefix = "[")) %>%
gtsummary::modify_fmt_fun(conf.high ~
gtsummary::label_style_number(digits = d,
suffix = "]")) %>%
gtsummary::remove_abbreviation("OR = Odds Ratio") %>%
gtsummary::remove_abbreviation("CI = Confidence Interval") %>%
gtsummary::remove_abbreviation("SE = Standard Error")
if (narrow == TRUE){
table <- table %>%
gtsummary::modify_column_merge(pattern = "{conf.low}, {conf.high}{p.value}",
row = !is.na(std.error)) %>%
gtsummary::modify_header(label = "Variable",
estimate = sym[1],
conf.low = "95% CI")
} else {
table <- table %>%
gtsummary::modify_header(label = "Variable",
estimate = sym[1],
conf.low = "95% CI",
p.value = "p")
}
table %>%
gtsummary::modify_column_merge(pattern = "{conf.low}, {conf.high}{p.value}",
row = !is.na(std.error)) %>%
gtsummary::modify_header(label = "Variable",
estimate = sym[1],
conf.low = "95% CI")
table
table %>%
gtsummary::modify_header(label = "Variable",
estimate = sym[1],
conf.low = "95% CI",
p.value = "p")
if (family(x)$link == "logit"){
back_trans <- "exp"
abr <- c("Odds Ratio","Logit Scale")
sym <- c("OR", "b")
}
table %>%
gtsummary::modify_column_merge(pattern = "{conf.low}, {conf.high}{p.value}",
row = !is.na(std.error)) %>%
gtsummary::modify_header(label = "Variable",
estimate = sym[1],
conf.low = "95% CI")
table %>%
gtsummary::modify_header(label = "Variable",
estimate = sym[1],
conf.low = "95% CI",
p.value = "p")
#' APA: gtsummary for a single linear model
#'
#' @param x REQUIRED: bare name. a single 'glm' object'
#' @param narrow  Optional. Logical. Default = FALSE, but TRUE will exclude p-vlaues from the table to make it narrower
#' @param fit Optional: vector. quoted names of fit statistics to include, can be: "r.squared", "adj.r.squared", "sigma", "statistic","p.value", "df", "logLik", "AIC", "BIC", "deviance", "df.residual", and "nobs"
#' @param d Optional: number. digits after the decimal, default = 2
#'
#' @return a gtsummary object
#' @import gtsummary
#' @import tidyverse
#' @import broom.helpers
#' @export
#'
#' @examples
#'
#' library(tidyverse)
#'
#' mtcars <- mtcars %>% dplyr::mutate(cyl = factor(cyl))
#'
#' fit_glm1 <- glm(vs ~ wt, data = mtcars, family = "binomial")
#' fit_glm2 <- glm(vs ~ wt + mpg , data = mtcars, family = "binomial")
#'
#' apaSupp::gt_glm(fit_glm2)
#' apaSupp::gt_glm(fit_glm2, narrow = TRUE, d = 3)
#' apaSupp::gt_glm(fit_glm2, narrow = TRUE, fit = c("AIC", "BIC"))
#'
gt_glm <- function(x,
narrow = FALSE,
fit = NA,
d = 2){
if (family(x)$link == "logit"){
back_trans <- "exp"
abr <- c("Odds Ratio","Logit Scale")
sym <- c("OR", "b")
}
if (narrow == FALSE){
p_fun <- function(x, d) apaSupp::p_num(x, d = d + 1)
} else {
p_fun <- function(x, d = d) apaSupp::p_star(x)
}
table <- x %>%
gtsummary::tbl_regression(intercept = FALSE,
conf.int = TRUE,
exponentiate = TRUE,
pvalue_fun = ~ p_fun(.x, d = d),
tidy_fun = broom.helpers::tidy_with_broom_or_parameters)
if (sum(!is.na(fit)) > 0){
table <- table %>%
gtsummary::add_glance_table(include = fit)
}
table <- table %>%
gtsummary::modify_column_hide(column = std.error) %>%
gtsummary::modify_fmt_fun(estimate ~
gtsummary::label_style_number(digits = d)) %>%
gtsummary::modify_fmt_fun(conf.low ~
gtsummary::label_style_number(digits = d,
prefix = "[")) %>%
gtsummary::modify_fmt_fun(conf.high ~
gtsummary::label_style_number(digits = d,
suffix = "]")) %>%
gtsummary::remove_abbreviation("OR = Odds Ratio") %>%
gtsummary::remove_abbreviation("CI = Confidence Interval") %>%
gtsummary::remove_abbreviation("SE = Standard Error")
if (narrow == TRUE){
table <- table %>%
gtsummary::modify_column_merge(pattern = "{conf.low}, {conf.high}{p.value}",
row = !is.na(std.error)) %>%
gtsummary::modify_header(label = "Variable",
estimate = sym[1],
conf.low = "95% CI")
} else {
table <- table %>%
gtsummary::modify_header(label = "Variable",
estimate = sym[1],
conf.low = "95% CI",
p.value = "p")
}
return(table)
}
gt_glm(fit_glm2, narrow = TRUE, fit = c("AIC", "BIC"))
gt_glm(fit_glm1, narrow = TRUE, fit = c("AIC", "BIC"))
fit_glm2 <- glm(vs ~ wt + mpg , data = mtcars, family = "binomial")
gt_glm(fit_glm2, narrow = TRUE, fit = c("AIC", "BIC"))
#' APA: gtsummary for a single linear model
#'
#' @param x REQUIRED: bare name. a single 'glm' object'
#' @param narrow  Optional. Logical. Default = FALSE, but TRUE will exclude p-vlaues from the table to make it narrower
#' @param fit Optional: vector. quoted names of fit statistics to include, can be: "r.squared", "adj.r.squared", "sigma", "statistic","p.value", "df", "logLik", "AIC", "BIC", "deviance", "df.residual", and "nobs"
#' @param d Optional: number. digits after the decimal, default = 2
#'
#' @return a gtsummary object
#' @import gtsummary
#' @import tidyverse
#' @import broom.helpers
#' @export
#'
#' @examples
#'
#' library(tidyverse)
#'
#' mtcars <- mtcars %>% dplyr::mutate(cyl = factor(cyl))
#'
#' fit_glm1 <- glm(vs ~ wt, data = mtcars, family = "binomial")
#' fit_glm2 <- glm(vs ~ wt + mpg , data = mtcars, family = "binomial")
#'
#' apaSupp::gt_glm(fit_glm2)
#' apaSupp::gt_glm(fit_glm2, narrow = TRUE, d = 3)
#' apaSupp::gt_glm(fit_glm2, narrow = TRUE, fit = c("AIC", "BIC"))
#'
gt_glm <- function(x,
narrow = FALSE,
fit = NA,
d = 2){
if (family(x)$link == "logit"){
back_trans <- "exp"
abr <- c("Odds Ratio","Logit Scale")
sym <- c("OR", "b")
}
if (narrow == FALSE){
p_fun <- function(x, d) apaSupp::p_num(x, d = d + 1)
} else {
p_fun <- function(x, d = d) apaSupp::p_star(x)
}
table <- x %>%
gtsummary::tbl_regression(intercept = FALSE,
conf.int = TRUE,
exponentiate = TRUE,
pvalue_fun = ~ p_fun(.x, d = d),
tidy_fun = broom.helpers::tidy_with_broom_or_parameters)
if (sum(!is.na(fit)) > 0){
table <- table %>%
gtsummary::add_glance_table(include = fit)
}
table <- table %>%
gtsummary::modify_column_hide(column = std.error) %>%
gtsummary::modify_fmt_fun(estimate ~
gtsummary::label_style_number(digits = d)) %>%
gtsummary::modify_fmt_fun(conf.low ~
gtsummary::label_style_number(digits = d,
prefix = "[")) %>%
gtsummary::modify_fmt_fun(conf.high ~
gtsummary::label_style_number(digits = d,
suffix = "]")) %>%
gtsummary::remove_abbreviation("OR = Odds Ratio") %>%
gtsummary::remove_abbreviation("CI = Confidence Interval") %>%
gtsummary::remove_abbreviation("SE = Standard Error")
if (narrow == TRUE){
table <- table %>%
gtsummary::modify_column_merge(pattern = "{conf.low}, {conf.high}{p.value}",
row = !is.na(std.error)) %>%
gtsummary::modify_header(label = "Variable",
estimate = sym[1],
conf.low = "95% CI")
} else {
table <- table %>%
gtsummary::modify_header(label = "Variable",
estimate = sym[1],
conf.low = "95% CI",
p.value = "p")
}
return(table)
}
setwd("C:/Users/A00315273/Box/Office of Research Services/StatStudio/Schwartz_TA/psy7610_hw_logistic")
library(tidyverse)
library(flextable)
mtcars %>%
dplyr::select(mpg, disp, hp, drat, wt) %>%
flextable::flextable() %>%
apaSupp::theme_apa(caption = "Summary of Some Variables")
library(tidyverse)
library(flextable)
mtcars %>%
flextable::flextable() %>%
apaSupp::theme_apa(caption = "Summary of Some Variables")
library(tidyverse)
library(flextable)
apaSupp::tab_desc(mtcars)
