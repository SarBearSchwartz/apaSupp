flextable::as_chunk(glue::glue("N = {n_obs}. ")),
flextable::as_chunk(ifelse(vif == TRUE,
"CI = confidence interval; VIF = variance inflation factor. ",
"CI = confidence interval. ")),
flextable::as_chunk(ifelse(lrt == TRUE,
"Significance denotes Wald t-tests for individual parameter estimates, as well as Likelihood Ratio Tests (LRT) for single-predictor deletion. ",
"Significance denotes Wald t-tests for parameter estimates. ")),
flextable::as_chunk(case_when(pr2 == "both"     ~ "Coefficient of determination included for both Tjur and McFadden's ",
pr2 == "tjur"     ~ "Coefficient of determination displays Tjur's ",
pr2 == "mcfadden" ~ "Coefficient of determination displays McFadden's ",
pr2 == "nagelkerke" ~ "Coefficient of determination displays Nagelkerke's ")),
flextable::as_i(ifelse(pr2 == "none", NA, "pseudo-R\u00B2. ")),
flextable::as_chunk(general_note)
)
if (back_trans == "exp"){
get_tran <- x %>%
gtsummary::tbl_regression(intercept = int,
conf.int = TRUE,
exponentiate = TRUE,
tidy_fun = broom.helpers::tidy_with_broom_or_parameters,
show_single_row = all_of(show_single_row)) %>%
gtsummary::modify_column_hide(column = std.error) %>%
gtsummary::modify_column_hide(column = p.value) %>%
gtsummary::modify_fmt_fun(estimate  ~ gtsummary::label_style_number(digits = d)) %>%
gtsummary::modify_fmt_fun(conf.low  ~ gtsummary::label_style_number(digits = d, prefix = "[")) %>%
gtsummary::modify_fmt_fun(conf.high ~ gtsummary::label_style_number(digits = d, suffix = "]")) %>%
gtsummary::remove_abbreviation("CI = Confidence Interval") %>%
gtsummary::remove_abbreviation("SE = Standard Error")  %>%
gtsummary::modify_table_body(~.x %>%
dplyr::mutate(estimate = ifelse(variable == "(Intercept)" & int == FALSE, NA, estimate)) %>%
dplyr::mutate(conf.low = ifelse(variable == "(Intercept)" & int == FALSE, NA, conf.low))) %>%
gtsummary::modify_table_body(~.x %>% dplyr::mutate(bk = NA)) %>%
gtsummary::modify_header(label = "Variable",
estimate = sym[1],
conf.low = "95% CI",
bk = "blank")
}
if (family(x)$link == "logit"){
get_tran <- get_tran %>%
gtsummary::remove_abbreviation("OR = Odds Ratio")
} else if (family(x)$family == "poisson"){
get_tran <- get_tran %>%
gtsummary::remove_abbreviation("IRR = Incidence Rate Ratio")
}
if (!is.null(fit)){
get_tran <- get_tran %>% gtsummary::add_glance_table(include = all_of(fit))
}
get <- x %>%
gtsummary::tbl_regression(intercept       = TRUE,
conf.int        = FALSE,
exponentiate    = FALSE,
pvalue_fun      = function(x) apaSupp::p_num(x, d = d + 1),
tidy_fun        = broom.helpers::tidy_with_broom_or_parameters,
show_single_row = show_single_row) %>%
gtsummary::modify_column_unhide(column = std.error) %>%
gtsummary::remove_abbreviation("SE = Standard Error")  %>%
gtsummary::remove_footnote_header() %>%
gtsummary::modify_fmt_fun(estimate  ~ function(x) apaSupp::p_num(x, d = (d + 1), stars = FALSE), rows =  stringr::str_detect(variable, "r.")) %>%
gtsummary::modify_fmt_fun(estimate  ~ function(x) apaSupp::p_num(x, d = (d - 1), stars = FALSE), rows = !stringr::str_detect(variable, "r.")) %>%
gtsummary::modify_fmt_fun(estimate  ~ gtsummary::label_style_number(digits = d),        rows = (row_type == "label") ) %>%
gtsummary::modify_fmt_fun(std.error ~ gtsummary::label_style_number(digits = d,         prefix = "(", suffix = ")"))
if (family(x)$link == "logit"){
get <- get %>%
gtsummary::remove_abbreviation("OR = Odds Ratio")
} else if (family(x)$family == "poisson"){
get <- get %>%
gtsummary::remove_abbreviation("IRR = Incidence Rate Ratio")
}
if (lrt == TRUE){
get <- get %>%
gtsummary::modify_table_body(dplyr::left_join,
apaSupp::pdr1_to_tibble(x, test = "Chisq", d = d),
by = c("variable", "row_type")) %>%
gtsummary::modify_header(label     = "Variable",
estimate  = sym[2],
std.error = "(SE)",
p.value   = "Wald",
p_dr1     = "LRT") %>%
gtsummary::modify_fmt_fun(p_dr1 ~ function(x) apaSupp::p_num(x, d = d + 1))
} else {
get <- get %>%
gtsummary::modify_header(label     = "Variable",
estimate  = sym[2],
std.error = "(SE)",
p.value   = "p")
}
get_orig <- get %>%
gtsummary::modify_column_hide(column = starts_with("p")) %>%
gtsummary::modify_table_body(~.x %>% dplyr::mutate(bk = NA)) %>%
gtsummary::modify_header(label    = "Variable",
estimate = sym[2],
conf.low = "95% CI",
bk       = "blank")
get_sig <- get %>%
gtsummary::modify_column_hide(column = estimate) %>%
gtsummary::modify_column_hide(column = std.error)
if (vif == TRUE){
get_vif <- get %>%
gtsummary::modify_column_hide(column = estimate) %>%
gtsummary::modify_column_hide(column = std.error)  %>%
gtsummary::modify_column_hide(column = starts_with("p")) %>%
gtsummary::modify_table_body(dplyr::left_join,
apaSupp::vif_to_tibble(x, d = d),
by = c("variable", "row_type")) %>%
gtsummary::modify_header(vif ~ "VIF")
table <- list(get_tran, get_orig, get_sig, get_vif) %>%
gtsummary::tbl_merge(tab_spanner = c(abr[1], abr[2], "p", NA)) %>%
gtsummary::as_flex_table() %>%
flextable::compose(part = "all", j = c(4, 7), value = flextable::as_paragraph(NA))
} else {
table <- list(get_tran,  get_orig,  get_sig) %>%
gtsummary::tbl_merge(tab_spanner = c(abr[1],  abr[2],  "p")) %>%
gtsummary::as_flex_table() %>%
flextable::compose(part = "header", j = c(4, 7), value = flextable::as_paragraph(NA)) %>%
flextable::compose(part = "body",   j = c(4, 7), value = flextable::as_paragraph(NA))
}
if(!is.null(var_labels)){ table <- table %>% flextable::labelizor(part = "body", labels = var_labels)}
n_col  <- flextable::ncol_keys(table)
n_rows <- flextable::nrow_part(table, part = "body")
if (family(x)$link == "logit"){
r2_tjur     <- performance::r2_tjur(x)     %>% unlist(use.names = FALSE) %>% apaSupp::p_num(d = d + 1, stars = FALSE)
r2_mcfadden <- performance::r2_mcfadden(x) %>% unlist(use.names = FALSE) %>% apaSupp::p_num(d = d + 1, stars = FALSE)
} else if (family(x)$family == "poisson"){
r2_nagelkerke     <- performance::r2_nagelkerke(x)     %>% unlist(use.names = FALSE) %>% apaSupp::p_num(d = d + 1, stars = FALSE)
}
if (pr2 == "both"){
table <- table %>%
flextable::add_body_row(top = FALSE, values = NA) %>%
flextable::compose(part  = "body", i = (n_rows + 1), j = 1,
value = flextable::as_paragraph(flextable::as_i("pseudo-R\u00B2"))) %>%
flextable::add_body_row(top = FALSE, values = NA) %>%
flextable::compose(part  = "body", i = (n_rows + 2), j = 2, value = flextable::as_paragraph("Tjur")) %>%
flextable::compose(part  = "body", i = (n_rows + 2), j = 3, value = flextable::as_paragraph(r2_tjur)) %>%
flextable::add_body_row(top = FALSE, values = NA) %>%
flextable::compose(part  = "body", i = (n_rows + 3), j = 2, value = flextable::as_paragraph("McFadden")) %>%
flextable::compose(part  = "body", i = (n_rows + 3), j = 3, value = flextable::as_paragraph(r2_mcfadden[1]))
} else if (pr2 == "tjur"){
table <- table %>%
flextable::add_body_row(top = FALSE, values = NA) %>%
flextable::compose(part  = "body", i = (n_rows + 1), j = 1, value = flextable::as_paragraph(flextable::as_i("pseudo-R\u00B2"))) %>%
flextable::compose(part =  "body", i = (n_rows + 1), j = 2, value = flextable::as_paragraph(r2_tjur))
} else if (pr2 == "mcfadden"){
table <- table %>%
flextable::add_body_row(top = FALSE, values = NA) %>%
flextable::compose(part = "body", i = (n_rows + 1), j = 1, value = flextable::as_paragraph(flextable::as_i("pseudo-R\u00B2"))) %>%
flextable::compose(part = "body", i = (n_rows + 1), j = 2, value = flextable::as_paragraph(r2_mcfadden[1]))
} else if (pr2 == "nagelkerke"){
table <- table %>%
flextable::add_body_row(top = FALSE, values = NA) %>%
flextable::compose(part  = "body", i = (n_rows + 1), j = 1, value = flextable::as_paragraph(flextable::as_i("pseudo-R\u00B2"))) %>%
flextable::compose(part =  "body", i = (n_rows + 1), j = 2, value = flextable::as_paragraph(r2_nagelkerke))
}
if (lrt == TRUE){
table <- table %>%
flextable::align(   part = "all",           j = c(8), align = "right") %>%
flextable::align(   part = "all",           j = c(9), align = "left") %>%
flextable::align(   part = "header", i = 1,           align = "center") %>%
flextable::merge_at(part = "header", i = 1, j = 8:9) %>%
flextable::compose( part = "header", i = 1, j = 8, value = flextable::as_paragraph(flextable::as_i("p"))) %>%
flextable::hline(   part = "header", i = 1, j = 8:9)
} else {
table <- table %>%
flextable::compose(part = "header", i = 1, j = 8, value = flextable::as_paragraph(NA)) %>%
flextable::compose(part = "header", i = 2, j = 8, value = flextable::as_paragraph(flextable::as_i("p")))
}
n_rows <- flextable::nrow_part(table, part = "body")
table <- table  %>%
flextable::delete_rows(part = "header", i = 1) %>%
flextable::add_header_row(values    = c(NA, abr[1], NA, abr[2], rep(NA, n_col - 6)),
colwidths = c( 1,     2,   1,     2,  rep( 1, n_col - 6))) %>%
apaSupp::theme_apa(caption      = caption,
main_note    = main_note,
p_note       = p_note,
d            = d,
breaks       = breaks,
symbols      = symbols) %>%
flextable::italic(part = "header", i = 2, j = 4:5) %>%
flextable::align( part = "all",           j = c(2, 5), align = "right") %>%
flextable::align( part = "all",           j = c(3, 6), align = "left") %>%
flextable::align( part = "header", i = 1,              align = "center") %>%
flextable::align( part = "footer",                     align = "left") %>%
flextable::hline( part = "header", i = 1, border = flextable::fp_border_default(width = 0)) %>%
flextable::hline( part = "header", i = 1, j = 2:3) %>%
flextable::hline( part = "header", i = 1, j = 5:6) %>%
flextable::autofit()
if (n_fit > 0) {
table <- table %>%
flextable::italic(part = "body", i = (n_rows - n_fit + 1):(n_rows)) %>%
flextable::hline( part = "body", i =  n_rows - n_fit)
}
return(table)
}
mtcars <- mtcars %>% dplyr::mutate(am = factor(am))
fit_glm1 <- glm(vs ~ am, data = mtcars, family = "binomial")
fit_glm2 <- glm(vs ~ wt + mpg + am, data = mtcars, family = "binomial")
tab_glm(fit_glm1)
tab_glm(fit_glm2)
tab_glm(fit_glm2, vif = FALSE)
tab_glm(fit_glm2, lrt = FALSE)
tab_glm(fit_glm2, vif = FALSE, lrt = FALSE)
tab_glm(fit_glm2, pr2 = "both")
apaSupp::tab_glm(fit_glm2, pr2 = "tjur")
tab_glm(fit_glm2, pr2 = "mcfadden")
tab_glm(fit_glm2, pr2 = "none")
use_pkgdown
use_pkgdown()
library(tidyverse)
library(gtsummary)
data(mtcars, package = "datasets")
mtcars <- mtcars %>%
dplyr::mutate(cyl = factor(cyl)) %>%
dplyr::mutate(vs = factor(vs,
levels = c(0, 1),
labels = c("V-shaped", "Straight"))) %>%
dplyr::mutate(am = factor(am,
levels = c(0, 1),
labels = c("Automatic",
"Manual")))
tab1(mtcars)
#' Descriptive Table, total or split by a factor
#'
#' @param df (`data.frame`)\cr A data frame.
#' @param split Optional: Quoted variable name
#' @param total Optional: Logical. Default = TRUE to include a total column in a split table
#' @param var_lab Optional: Text. Label to print above the variable names in the header
#' @param total_lab Optional: Text. Label above the total column in a split table
#' @param total_last Optional: Logical. Default = TRUE to include the total column last vs first
#' @param test Optional: Logical. Default = TRUE to run comparisons in a split table
#' @param na.rm Optional: Logical. Default = FALSE, do not remove instances with a missing value from the entire table
#' @param caption Optional: Text. Caption for the table
#' @param general_note Optional: Text. General note for footer of APA table
#' @param p_note Optional: Text. (default = NULL) Significance note for APA table, If `p_note = "apa123"` then the standard `"* p < .05. ** p < .01. *** p < .001."` will be used
#' @param no_notes Optional: Logical.  Defaults to `FALSE`, if `TRUE` will ignore `general_note` and `p_note`
#' @param breaks Optional: numeric vector of p-value cut-points
#' @param symbols Optional: character vector for symbols denoting p-value cut-points
#' @param d Optional: Number. Digits after the decimal place
#' @param statistic ([`formula-list-selector`][syntax])\cr
#'   Used to specify the summary statistics for each variable.
#'   The default is
#'   `list(all_continuous()  ~ "{mean} ({sd})", all_categorical() ~ "{n}    ({p}%)")`.
#' @param type ([`formula-list-selector`][syntax])\cr
#'   Specifies the summary type. Accepted value are
#'   `c("continuous", "continuous2", "categorical", "dichotomous")`.
#'   If not specified, default type is assigned via
#'   `assign_summary_type()`.
#' @param value ([`formula-list-selector`][syntax])\cr
#'   Specifies the level of a variable to display on a single row.
#'   The gtsummary type selectors, e.g. `all_dichotomous()`, cannot be used
#'   with this argument. Default is `NULL`.
#' @param missing,missing_text,missing_stat
#'   Arguments dictating how and if missing values are presented:
#'   - `missing`: must be one of `c("ifany", "no", "always")`.
#'   - `missing_text`: string indicating text shown on missing row. Default is `"Unknown"`.
#'   - `missing_stat`: statistic to show on missing row. Default is `"{N_miss}"`.
#'     Possible values are `N_miss`, `N_obs`, `N_nonmiss`, `p_miss`, `p_nonmiss`.
#' @param sort ([`formula-list-selector`][syntax])\cr
#'   Specifies sorting to perform for categorical variables.
#'   Values must be one of `c("alphanumeric", "frequency")`.
#'   Default is `all_categorical(FALSE) ~ "alphanumeric"`.
#' @param percent (`string`)\cr
#'   Indicates the type of percentage to return.
#'   Must be one of `c("column", "row", "cell")`. Default is `"column"`.
#'
#'   In rarer cases, you may need to define/override the typical denominators.
#'   In these cases, pass an integer or a data frame. Refer to the
#'   [`?cards::ard_categorical(denominator)`][cards::ard_categorical] help file for details.
#' @param include ([`tidy-select`][dplyr::dplyr_tidy_select])\cr
#'   Variables to include in the summary table. Default is `everything()`.
#'
#'
#'
#'
#' @return a `flextable` table with caption
#' @import tidyverse
#' @import flextable
#' @import gtsummary
#' @import cardx
#' @export
#'
#' @examples
#' library(tidyverse)
#' library(gtsummary)
#'
#' data(mtcars, package = "datasets")
#'
#' mtcars <- mtcars %>%
#'   dplyr::mutate(cyl = factor(cyl)) %>%
#'   dplyr::mutate(vs = factor(vs,
#'                             levels = c(0, 1),
#'                             labels = c("V-shaped", "Straight"))) %>%
#'   dplyr::mutate(am = factor(am,
#'                             levels = c(0, 1),
#'                             labels = c("Automatic",
#'                                        "Manual")))
#'
#'
#' ##########################
#'
#' tab1(mtcars)
#'
#'
#' mtcars %>%
#'   dplyr::select(cyl,
#'                 "Fuel Economy, mpg" = mpg,
#'                 "Dispacement, cu-in" = disp,
#'                 "Gross Horsepower" = hp,
#'                 "Real Axel Ratio" = drat,
#'                 "Weight, 1000 lbs" = wt,
#'                 "Engine Type" = vs) %>%
#'   tab1(split        = "cyl",
#'        total_last   = FALSE,
#'        caption      = "Descriptive Summary of Car Road Tests",
#'        general_note = "Data extracted from the 1974 Motor Trend US magazine.",
#'        p_note       = "apa3")
tab1 <- function(df,
split        = NULL,
total        = TRUE,
var_lab      = " ",
total_lab    = "Total\nN = {N}",
total_last   = TRUE,
test         = TRUE,
na.rm        = FALSE,
caption      = "Summary of Variables",
general_note = NA,
no_notes     = FALSE,
p_note       = "apa123",
breaks       = c(.05, .01, .001),
symbols      = c("*", "**", "***"),
d            = 2,
statistic    = list(all_continuous()  ~ "{mean} ({sd})",
all_categorical() ~ "{n}    ({p}%)"),
value        = NULL,
type         = NULL,
missing      = c("ifany", "no", "always"),
missing_text = "Unknown",
missing_stat = "{N_miss}",
sort         = all_categorical(FALSE) ~ "alphanumeric",
percent      = c("column", "row", "cell"),
include      = everything()){
if (!is.null(split)){
n_grps <- df %>%
dplyr::pull(split) %>%
levels() %>%
length()
} else {
total  <- FALSE
test   <- FALSE
n_grps <- 1
p_note <- NA
}
if(test == FALSE) p_note <- NA
vars <- df %>%
dplyr::select(-!!split) %>%
names()
n_tot <- df %>%
dplyr::select(-!!split) %>%
ncol()
n_factors <- df %>%
dplyr::select(-!!split) %>%
dplyr::select_if(is.factor) %>%
ncol()
n_numeric <-  df %>%
dplyr::select(-!!split) %>%
dplyr::select_if(is.numeric) %>%
ncol()
if (no_notes == TRUE){
general_note <- NA
p_note       <- NA
}
main_note <- flextable::as_paragraph(
flextable::as_i("Note. "),
flextable::as_chunk(ifelse(n_numeric > 0,
"Continuous variables are summarised with means ",
NA)),
flextable::as_i(ifelse(n_numeric > 0,
"(SD)",
NA)),
flextable::as_chunk(ifelse(n_numeric > 0 & test == TRUE,
" and significant group differences assessed via ",
". ")),
flextable::as_chunk(case_when(n_numeric > 0 & test == TRUE & n_grps > 2
~ "independent one-way analysis of vaiance (ANOVA). ",
n_numeric > 0 & test == TRUE & n_grps == 2
~ "independent t-tests. ")),
flextable::as_chunk(ifelse(n_numeric > 0,
"Categorical variables are summarised with counts ",
NA)),
flextable::as_i(ifelse(n_numeric > 0,
"(%)",
NA)),
flextable::as_chunk(ifelse(n_numeric > 0 & test == TRUE,
" and significant group differences assessed via Chi-squared tests for independence. ",
". ")),
flextable::as_chunk(ifelse(!is.na(general_note), general_note, NA))
)
gt <- df %>%
gtsummary::tbl_summary(by           = split,
statistic    = statistic,
type         = type,
value        = value,
digits       = list(all_continuous()  ~ c(d, d),
all_categorical() ~ c(0, 1)),
missing      = missing,
missing_text = missing_text,
missing_stat = missing_stat,
sort         = sort,
percent      = percent,
include      = include) %>%
gtsummary::modify_header(label      = var_lab)
if(n_grps > 1){
gt <- gt %>%
gtsummary::modify_header(all_stat_cols() ~ "{level}\nn = {n} ({style_percent(p, digits = 1)}%)")
}
if(total == TRUE){
gt <- gt %>%
gtsummary::add_overall(last = total_last,
col_label = total_lab)
}
if(test == TRUE){
gt <- gt %>%
gtsummary::add_p(
test = list(all_continuous()  ~ "oneway.test",
all_categorical() ~ "chisq.test"),
pvalue_fun = ~ apaSupp::p_num(.x,
d       = d + 1,
breaks  = breaks,
symbols = symbols))
}
ft <- gt %>%
gtsummary::remove_footnote_header(columns = everything()) %>%
gtsummary::as_flex_table() %>%
apaSupp::theme_apa(caption      = caption,
main_note    = main_note,
p_note       = p_note,
breaks       = breaks,
symbols      = symbols)
return(ft)
}
library(tidyverse)
library(gtsummary)
data(mtcars, package = "datasets")
mtcars <- mtcars %>%
dplyr::mutate(cyl = factor(cyl)) %>%
dplyr::mutate(vs = factor(vs,
levels = c(0, 1),
labels = c("V-shaped", "Straight"))) %>%
dplyr::mutate(am = factor(am,
levels = c(0, 1),
labels = c("Automatic",
"Manual")))
##########################
tab1(mtcars)
mtcars %>%
dplyr::select(cyl,
"Fuel Economy, mpg" = mpg,
"Dispacement, cu-in" = disp,
"Gross Horsepower" = hp,
"Real Axel Ratio" = drat,
"Weight, 1000 lbs" = wt,
"Engine Type" = vs) %>%
tab1(split        = "cyl",
total_last   = FALSE,
caption      = "Descriptive Summary of Car Road Tests",
general_note = "Data extracted from the 1974 Motor Trend US magazine.",
p_note       = "apa3")
mtcars %>%
dplyr::select(cyl,
"Fuel Economy, mpg" = mpg,
"Dispacement, cu-in" = disp,
"Gross Horsepower" = hp,
"Real Axel Ratio" = drat,
"Weight, 1000 lbs" = wt,
"Engine Type" = vs)
mtcars %>%
dplyr::select(cyl,
"Fuel Economy, mpg" = mpg,
"Dispacement, cu-in" = disp,
"Gross Horsepower" = hp,
"Real Axel Ratio" = drat,
"Weight, 1000 lbs" = wt,
"Engine Type" = vs) %>% tibble::glimpse()
mtcars %>% tibble::glimpse()
?gtsummary::tbl_summary
tab1(mtcars,
type = list(gear = "continuous",
carb = "continuous"))
dplyr::select(cyl,
"Fuel Economy, mpg" = mpg,
"Dispacement, cu-in" = disp,
"Gross Horsepower" = hp,
"Real Axel Ratio" = drat,
"Weight, 1000 lbs" = wt,
"Engine Type" = vs) %>%
tab1(split        = "cyl",
total_last   = FALSE,
caption      = "Descriptive Summary of Car Road Tests",
general_note = "Data extracted from the 1974 Motor Trend US magazine.",
p_note       = "apa3")
mtcars %>%
dplyr::select(cyl,
"Fuel Economy, mpg" = mpg,
"Dispacement, cu-in" = disp,
"Gross Horsepower" = hp,
"Real Axel Ratio" = drat,
"Weight, 1000 lbs" = wt,
"Engine Type" = vs) %>%
tab1(split        = "cyl",
total_last   = FALSE,
caption      = "Descriptive Summary of Car Road Tests",
general_note = "Data extracted from the 1974 Motor Trend US magazine.",
p_note       = "apa3")
?save_as_docx
